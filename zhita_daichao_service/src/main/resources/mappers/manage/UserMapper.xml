<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhita.dao.manage.UserMapper">
	<resultMap id="BaseResultMap"
		type="com.zhita.model.manage.User">
		<constructor>
			<idArg column="id" javaType="java.lang.Integer"
				jdbcType="INTEGER" />
			<arg column="sourceId" javaType="java.lang.Integer"
				jdbcType="INTEGER" />
			<arg column="nickname" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="phone" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="dayFen" javaType="java.lang.Integer"
				jdbcType="INTEGER" />
			<arg column="registrationTime" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
			<arg column="age" javaType="java.lang.Integer" jdbcType="INTEGER" />
			<arg column="idCard" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="openId" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="loginStatus" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="pwd" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="company" javaType="java.lang.String"
				jdbcType="VARCHAR" />
		    <arg column="registrationType" javaType="java.lang.String"
				jdbcType="VARCHAR" />
	        <arg column="loginTime" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="programQrCode" javaType="java.lang.String"
				jdbcType="VARCHAR" />
			<arg column="fatherId" javaType="java.lang.Integer"
				jdbcType="INTEGER" />
		</constructor>
	</resultMap>
	<sql id="Base_Column_List">
		id, sourceId, nickname, phone, dayFen, registrationTime,
		name, age, idCard,openId,loginStatus,pwd,company,registrationType,loginTime,programQrCode,fatherId
	</sql>	
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.zhita.model.manage.User">
		insert into user (id, sourceId,
		nickname,
		phone, dayFen, registrationTime,
		name, age, idCard,openId,loginStatus,pwd,company,registrationType,loginTime,programQrCode,fatherId)
		values
		(#{id,jdbcType=INTEGER}, #{sourceId,jdbcType=INTEGER},
		#{nickname,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR},
		#{dayfen,jdbcType=INTEGER}, #{registrationtime,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER},
		#{idcard,jdbcType=VARCHAR},#{openId,jdbcType=VARCHAR},#{loginStatus,jdbcType=VARCHAR},
		#{pwd,jdbcType=VARCHAR},#{company,jdbcType=VARCHAR},
		#{registrationType,jdbcType=VARCHAR},#{loginTime,jdbcType=VARCHAR},#{programQrCode,jdbcType=VARCHAR},
		#{fatherId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective"
		parameterType="com.zhita.model.manage.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="sourceId != null">
				sourceId,
			</if>
			<if test="nickname != null">
				nickname,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="dayfen != null">
				dayFen,
			</if>
			<if test="registrationtime != null">
				registrationTime,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="age != null">
				age,
			</if>
			<if test="idcard != null">
				idCard,
			</if>
			<if test="openId != null">
				openId,
			</if>
			<if test="loginStatus != null">
				loginStatus,
			</if>
			<if test="pwd != null">
				pwd,
			</if>
		    <if test="company != null">
				company,
			</if>
		    <if test="registrationType != null">
				registrationType,
			</if>
		    <if test="loginTime != null">
				loginTime,
			</if>
			<if test="programQrCode != null">
				programQrCode,
			</if>
			<if test="fatherId != null">
				fatherId,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="sourceId != null">
				#{sourceId,jdbcType=INTEGER},
			</if>
			<if test="nickname != null">
				#{nickname,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="dayfen != null">
				#{dayfen,jdbcType=INTEGER},
			</if>
			<if test="registrationtime != null">
				#{registrationtime,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=INTEGER},
			</if>
			<if test="idcard != null">
				#{idcard,jdbcType=VARCHAR},
			</if>
			<if test="openId != null">
				#{openId,jdbcType=VARCHAR},
			</if>
			<if test="loginStatus != null">
				#{loginStatus,jdbcType=VARCHAR},
			</if>
			<if test="pwd != null">
				#{pwd,jdbcType=VARCHAR},
			</if>
		    <if test="company != null">
				#{company,jdbcType=VARCHAR},
			</if>
		    <if test="registrationType != null">
				#{registrationType,jdbcType=VARCHAR},
			</if>
		    <if test="loginTime != null">
				#{loginTime,jdbcType=VARCHAR},
			</if>
		    <if test="programQrCode != null">
				#{programQrCode,jdbcType=VARCHAR},
			</if>
			<if test="fatherId != null">
				#{fatherId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.zhita.model.manage.User">
		update user
		<set>
			<if test="sourceId != null">
				source = #{sourceId,jdbcType=INTEGER},
			</if>
			<if test="nickname != null">
				nickname = #{nickname,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="dayfen != null">
				dayFen = #{dayfen,jdbcType=INTEGER},
			</if>
			<if test="registrationtime != null">
				registrationTime = #{registrationtime,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				age = #{age,jdbcType=INTEGER},
			</if>
			<if test="idcard != null">
				idCard = #{idcard,jdbcType=VARCHAR},
			</if>
			<if test="openId != null">
				openId = #{openId,jdbcType=VARCHAR},
			</if>
			<if test="loginStatus != null">
				loginStatus = #{loginStatus,jdbcType=VARCHAR},
			</if>
			<if test="pwd != null">
				pwd = #{pwd,jdbcType=VARCHAR},
			</if>
		    <if test="company != null">
				company = #{company,jdbcType=VARCHAR},
			</if>
	        <if test="registrationType != null">
				registrationType = #{registrationType,jdbcType=VARCHAR},
			</if>
		    <if test="loginTime != null">
				loginTime = #{loginTime,jdbcType=VARCHAR},
			</if>
		    <if test="programQrCode != null">
				programQrCode = #{programQrCode,jdbcType=VARCHAR},
			</if>
			<if test="fatherId != null">
				fatherId = #{fatherId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.zhita.model.manage.User">
		update user
		set sourceId = #{sourceId,jdbcType=INTEGER},
		nickname = #{nickname,jdbcType=VARCHAR},
		phone =
		#{phone,jdbcType=VARCHAR},
		dayFen = #{dayfen,jdbcType=INTEGER},
		registrationTime = #{registrationtime,jdbcType=VARCHAR},
		name =
		#{name,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER},
		idCard =
		#{idcard,jdbcType=VARCHAR},
		openId = #{openId,jdbcType=VARCHAR},
		loginStatus =#{loginStatus,jdbcType=VARCHAR},
		pwd =#{pwd,jdbcType=VARCHAR},
		company =#{company,jdbcType=VARCHAR},
		registrationType =#{registrationType,jdbcType=VARCHAR},
		loginTime =#{loginTime,jdbcType=VARCHAR},
		programQrCode =#{programQrCode,jdbcType=VARCHAR},
		fatherId =#{fatherId,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<!-- 查找用户表有多少条记录 -->
	<select id="getregistered" resultType="java.lang.Long">
		select count(phone) from
		user
	</select>
	<!-- 查找日新增用户数 -->
	<select id="getdailyUsers" resultType="java.lang.Long" parameterType="java.lang.Long">
		select count(phone) from user where
		registrationTime>=#{todayZeroTimestamps}
		and registrationTime &lt;
		#{tomorrowZeroTimestamps}
	</select>
	<!-- 查找月新增用户数 -->
	<select id="getmonthlyUsers" resultType="java.lang.Long" parameterType="java.lang.Long">
		select count(phone) from user where
		registrationTime>=#{monthlyZeroTimestamps} and registrationTime &lt;
		#{nextMonthlyZeroTimestamps}
	</select>

	  	<!--判断用户名是否存在 -->
	<select id="findphone" resultMap="BaseResultMap" parameterType="String">
    	<![CDATA[
       SELECT a.* FROM user a WHERE 1=1 
       AND a.phone=#{phone} and a.company=#{company}
       ]]>
	</select>
	  	<!-- 插入用户信息 -->
	<insert id="insertfootprint" parameterType="java.util.Map">
		insert into user (phone, nickname,
		openId,registrationTime,loginStatus,company,registrationType,loginTime)
		values (#{phone},
		#{nickName},
		#{openId},
		#{registrationTime},
		#{loginStatus},
		#{company},
		#{registrationType},
		#{registrationTime})
	</insert>
	<!-- 后台管理   查询出用户表总数量 -->
	<select id="pageCount" resultType="java.lang.Integer">
		select count(phone) from user where company=#{arg0}
	</select>
	<!-- 后台管理   通过手机号模糊查询用户总数量 -->
	<select id="pageCountByPhone" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user where phone like #{arg0}"%" and company=#{arg1}
	</select>	
	<!--后台管理    通过渠道名称模糊查询出用户总数量  -->
	<select id="pageCountBySourceName" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user u inner join source s on u.sourceId=s.id where s.sourceName=#{arg0} and u.company=#{arg1}
	</select>
	<!-- 后台管理  通过注册时间模糊查询出用户总数量 -->
	<select id="pageCountByRegistrationtime" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user where registrationTime between #{arg0} and #{arg1} and company=#{arg2}
	</select>
	<!-- 后台管理    通过手机号和渠道名称模糊查询用户总数量  -->
	<select id="pageCountByPhoneAndSourceName" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%" and s.sourceName=#{arg1} and u.company=#{arg2}
	</select>
	<!-- 后台管理    通过手机号和注册时间模糊查询用户总数量  -->
	<select id="pageCountByPhoneAndRegistrationtime" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user where phone like #{arg0}"%" and registrationTime between #{arg1} and #{arg2} and company=#{arg3}
	</select>
	<!-- 后台管理    通过渠道名称和注册时间模糊查询用户总数量  -->
	<select id="pageCountBySourceNameAndRegistrationtime" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user u inner join source s on u.sourceId=s.id where s.sourceName=#{arg0} and u.registrationTime between #{arg1} and #{arg2} and u.company=#{arg3}
	</select>
	<!-- 后台管理    通过手机号、渠道名称和注册时间模糊查询用户总数量  -->
	<select id="pageCountByPhoneSourceNameAndRegistrationtime" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(phone) from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%"　and s.sourceName=#{arg1} and u.registrationTime between #{arg2} and #{arg3} and company=#{arg4}
	</select>
	<!-- 后台管理   根据用户id查询出按钮足迹  商品足迹和贷款分类足迹的总数量 -->
	<select id="pageCountThreeFootprint" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		select count(userId) from 
		(select * from button_footprint b where userId=#{userId} and deleted='0'
		UNION ALL
		SELECT * from commodity_footprint c where userId=#{userId} and deleted='0'
		UNION ALL
		SELECT * from loan_classification_footprint l where userId=#{userId} and deleted='0') he
	</select>
	<resultMap type="com.zhita.model.manage.User" id="userSource">
	   <id property="id" column="id"/>
       <result property="nickname" column="nickname"/>         
       <result property="phone" column="phone"/> 
       <result property="dayfen" column="dayFen"/> 
       <result property="registrationtime" column="registrationTime"/> 
       <!-- ofType指定Source对象-->
       <collection property="source" ofType="com.zhita.model.manage.Source">
       		<result property="sourcename" column="sourceName"/>      
       </collection>
	</resultMap>
	
	<!-- 后台管理    查询出用户表所有信息，含分页 -->
	<select id="queryAllUser" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id and u.company=#{arg0} limit #{arg1},#{arg2}
	</select>
	<!-- 后台管理    查询出用户表所有信息，不含分页 -->
	<select id="queryAllUser1" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id and u.company=#{arg0}
	</select>
	<!-- 后台管理   通过手机号模糊查询，含分页 -->
	<select id="queryByPhone" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%" and u.company=#{arg1} limit #{arg2},#{arg3}
	</select>
	<!--后台管理   通过渠道名称模糊查询，含分页  -->
	<select id="queryBySourceName" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where s.sourceName=#{arg0} and u.company=#{arg1} limit #{arg2},#{arg3}
	</select>
	<!-- 后台管理  通过注册时间模糊查询，含分页 -->
	<select id="queryByRegistrationtime" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where u.registrationTime between #{arg0} and #{arg1} and company=#{arg2} limit #{arg3},#{arg4}
	</select>
	<!-- 后台管理   根据手机号和渠道名称进行模糊查询，含分页 -->
	<select id="queryByPhoneAndSourceName" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%" and s.sourceName=#{arg1} and u.company=#{arg2} ]limit #{arg3},#{arg4}
	</select>
	<!-- 后台管理   根据手机号和注册时间进行模糊查询，含分页 -->
	<select id="queryByPhoneAndRegistrationtime" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%" and u.registrationTime between #{arg1} and #{arg2} limit #{arg3},#{arg4}
	</select>
	<!-- 后台管理   根据渠道名称和注册时间进行模糊查询，含分页 -->
	<select id="queryBySourceNameAndRegistrationtime" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where s.sourceName=#{arg0} and u.registrationTime between #{arg1} and #{arg2} and company=#{arg3} limit #{arg4},#{arg5}
	</select>
	<!-- 后台管理   根据手机号、渠道名称和注册时间进行模糊查询，含分页 -->
	<select id="queryByPhoneSourceNameAndRegistrationtime" resultMap="userSource">
		select s.sourceName,u.id,u.nickname,u.phone,u.dayFen,u.registrationTime,u.company,u.registrationType,u.loginTime from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%" and s.sourceName=#{arg1} and u.registrationTime between #{arg2} and #{arg3} and company=#{arg4} limit #{arg5},#{arg6}
	</select>
	<!-- 后台管理 根据用户id查询出按钮足迹  商品足迹和贷款分类足迹    将其封装到按钮足迹实体类中  含分页-->
	<select id="queryAllButton" parameterType="java.lang.Integer" resultType="com.zhita.model.manage.ButtonFootprint">
		select * from button_footprint b where userId=#{arg0} and deleted='0'
		UNION ALL
		SELECT * from commodity_footprint c where userId=#{arg0} and deleted='0'
		UNION ALL
		SELECT * from loan_classification_footprint l where userId=#{arg0} and deleted='0'
		ORDER BY footprintTime desc limit #{arg1},#{arg2}
	</select>
	<!-- 后台管理   根据用户id查询出当前用户   当天 在商品足迹表的数量 -->
	<select id="queryAmountByUserId" resultType="java.lang.Integer">
		select count(distinct c.footprint) from commodity_footprint c,loans_businesses l 
		where c.footprint = l.businessName and c.userId=#{arg0} and c.deleted = 0 and l.deleted = 0 and l.state = 1 and footprintTime>=#{arg1} and footprintTime &lt;#{arg2}
		and c.company=#{arg3}
	</select>
	<!-- 后台管理   根据用户电话    更新用户 表里的当日分发系数字段 -->
	<update id="upaDayFen">
		update user set dayFen=#{arg0} where phone=#{arg1}
	</update>
	<!-- 后台管理   查询出所有用户的手机号 -->
	<select id="queryAllPhone" resultType="com.zhita.model.manage.User">
		select id,phone from user where company=#{arg0}
	</select>
	<!-- 后台管理   根据手机号和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneByPhoneLike" resultType="com.zhita.model.manage.User">
		select id,phone from user where phone like #{arg0}"%" company=#{arg0}
	</select>
	<!-- 后台管理   根据手机号,渠道名称和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneByPhoneSouNameLike" resultType="com.zhita.model.manage.User">
		select id,phone from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%" and s.sourceName=#{arg1} and u.company=#{arg2}
	</select>
	<!-- 后台管理   根据手机号,注册时间和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneByPhoneTimeLike" resultType="com.zhita.model.manage.User">
		select id,phone from user where phone like #{arg0}"%" and registrationTime between #{arg1} and #{arg2} and company=#{arg3}
	</select>
	<!-- 后台管理   根据手机号,渠道名称,注册时间和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneByPhoneSouNameTimeLike" resultType="com.zhita.model.manage.User">
		select id,phone from user u inner join source s on u.sourceId=s.id where u.phone like #{arg0}"%"　and s.sourceName=#{arg1} and u.registrationTime between #{arg2} and #{arg3} and company=#{arg4}
	</select>
	<!-- 后台管理   根据渠道名称号和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneBySouNameLike" resultType="com.zhita.model.manage.User">
		select id,phone from user u inner join source s on u.sourceId=s.id where s.sourceName=#{arg0} and u.company=#{arg1}
	</select>
	<!-- 后台管理   根据渠道名称,注册时间和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneBySouNameTimeLike" resultType="com.zhita.model.manage.User">
		select id,phone from user u inner join source s on u.sourceId=s.id where s.sourceName=#{arg0} and u.registrationTime between #{arg1} and #{arg2} and u.company=#{arg3}
	</select>
	<!-- 后台管理   根据注册时间和公司名查询出所有用户的手机号 -->
	<select id="queryAllPhoneByTimeLike" resultType="com.zhita.model.manage.User">
		select id,phone from user where registrationTime between #{arg0} and #{arg1} and company=#{arg2}
	</select>
	
	<!--登录时，修改登录状态和openId -->
	<update id="updateloginStatus" parameterType="java.lang.String" >
		update user
		set loginStatus = #{loginStatus},
		openId = #{openId},
		loginTime = #{loginTime}		
		where phone = #{phone} and company = #{company}
	</update>
	<!--登录时，修改登录状态-->
	<update id="updateStatus" parameterType="java.lang.String" >
		update user
		set loginStatus = #{loginStatus},
		loginTime = #{loginTime}	
		where phone = #{phone} and company = #{company}
	</update>
	<!-- 后台管理 通过手机号获取用户的id  -->
	<select id="getId" parameterType="java.lang.String" resultType="java.lang.Integer">
		select id from user where phone = #{phone} and company = #{company}
	</select>
		<!-- 退出时，修改登录状态修改 -->
	<update id="updatelogOutStatus" parameterType="map" >
		update user
		set loginStatus = #{loginStatus}
		where id = #{userId} and company = #{company} 
	</update>
		<!-- 小程序 通过openId查询登录状态 -->
	<select id="getLoginStatus" parameterType="java.lang.String" resultType="java.lang.String">
		select loginStatus from user where openId = #{openId} and company = #{company}
	</select>
			<!-- 小程序 通过openId查询userId-->
	<select id="getUserId" parameterType="java.lang.String" resultType="java.lang.String">
		select id from user where openId = #{openId} and company = #{company}
	</select>
		<!-- 小程序 通过openId查询phone-->
	<select id="getPhone" parameterType="java.lang.String" resultType="java.lang.String">
		select phone from user where openId = #{openId} and company = #{company}
	</select>
		  	<!--APP 插入用户信息 -->
	<insert id="setAPPUser" parameterType="java.util.Map">
		insert into user (phone, pwd,
		sourceId,registrationTime,loginStatus,registrationType,company,loginTime)
		values (#{phone},
		#{md5Pwd},
		#{sourceId},
		#{registrationTime},
		#{loginStatus},
		#{registrationType},
		#{company},
		#{registrationTime})
	</insert>
			<!--APP 修改密码-->
	<update id="updatePwd" parameterType="java.lang.String" >
		update user
		set pwd = #{md5Pwd}
		where phone = #{phone} and company = #{company}
	</update>	
				<!--APP 查询密码-->
	<select id="getMd5pwd" parameterType="java.lang.String" resultType="java.lang.String">
      select pwd from user where phone = #{phone} and company = #{company}
	</select>
	
	<!--小程序 查询二维码的url-->
	<select id="getProgramQrCode" parameterType="java.lang.String" resultType="java.lang.String">
      select programQrCode from user where id = #{scene}
	</select>
	
	<!--小程序 插入二维码的url-->
		<update id="setProgramQrCode" parameterType="java.lang.String" >
		update user
		set programQrCode = #{qrurl}
		where id = #{scene}
	</update>	
	
		  	<!-- 插入用户信息,用于用户扫二维码登录时 -->
	<insert id="insertfootprint1" parameterType="java.util.Map">
		insert into user (phone, nickname,
		openId,registrationTime,loginStatus,company,registrationType,loginTime,fatherId)
		values (#{phone},
		#{nickName},
		#{openId},
		#{registrationTime},
		#{loginStatus},
		#{company},
		#{registrationType},
		#{registrationTime},
		#{fatherId})
	</insert>
	
		<!--登录时，修改登录状态，openId和fatherId，用于用户扫二维码登录时 -->
	<update id="updateloginStatus1" parameterType="java.util.Map" >
		update user
		set loginStatus = #{loginStatus},
		openId = #{openId},
		loginTime = #{loginTime},
		fatherId = #{fatherId}		
		where phone = #{phone} and company = #{company}
	</update>
	
			<!--登录时，修改登录状态，用于用户扫二维码登录时-->
	<update id="updateStatus1" parameterType="java.util.Map" >
		update user
		set loginStatus = #{loginStatus},
		loginTime = #{loginTime},
		fatherId = #{fatherId}	
		where phone = #{phone} and company = #{company}
	</update>
	
		<!-- 小程序 通过id获取密码  -->
	<select id="getPwd" parameterType="java.lang.Integer" resultType="java.lang.String">
		select pwd from user where id = #{id}
	</select>
	
		<!--APP 插入密码-->
		<update id="setPwd" parameterType="map" >
		update user
		set pwd = #{md5Pwd}
		where id = #{userId}
	</update>	
	
		  	<!--APP 插入用户信息 -->
	<insert id="insertUser" parameterType="java.util.Map">
		insert into user (phone,registrationTime,loginStatus,company,registrationType,loginTime,sourceId)
		values (#{phone},
		#{registrationTime},
		#{loginStatus},
		#{company},
		#{registrationType},
		#{registrationTime},
		#{sourceId})
	</insert>
</mapper>